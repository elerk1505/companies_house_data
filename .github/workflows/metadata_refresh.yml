name: Metadata Refresh (Snapshot + API)

on:
  schedule:
    - cron: "0 */6 * * *"   # every 6 hours
  workflow_dispatch:
    inputs:
      year:
        description: "Year (defaults to current if blank)"
        required: false
        type: string
        default: ""
      half:
        description: "Half (if set, overrides matrix)"
        required: false
        type: choice
        options: [H1, H2]
      limit:
        description: "API cap per run (default 1500)"
        required: false
        type: string
        default: "1500"
      max_rpm:
        description: "Max requests per minute (safe 8â€“15; default 10)"
        required: false
        type: string
        default: "10"
      batch_size:
        description: "Checkpoint every N rows (default 300)"
        required: false
        type: string
        default: "300"

permissions:
  contents: write

jobs:
  refresh:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        half: [H1, H2]
    # If the user manually selects a half, only run that one
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.half == '' || matrix.half == inputs.half }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: python -m pip install -U pip pandas pyarrow requests

      - name: Snapshot + API refresh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          CH_API_KEY: ${{ secrets.CH_API_KEY }}
          PYTHONPATH: ${{ github.workspace }}
          CH_MAX_RPM: ${{ inputs.max_rpm || '10' }}
        shell: bash
        run: |
          YEAR_ARG=""
          if [ -n "${{ inputs.year }}" ]; then
            YEAR_ARG="--year ${{ inputs.year }}"
          fi

          python -m scripts.metadata_snapshot_and_fill \
            $YEAR_ARG \
            --half "${{ inputs.half || matrix.half }}" \
            --limit "${{ inputs.limit || '1500' }}" \
            --batch-size "${{ inputs.batch_size || '300' }}" \
            --max-rpm "${{ inputs.max_rpm || '10' }}"
